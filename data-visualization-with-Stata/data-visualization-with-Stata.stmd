% Data Visualization With Stata
% Andy Grogan-Kaylor
% `s c(current_date)`

---
geometry: margin=1 in
---

# Introduction 

<style>h1 {color: #00274C;} h2 {color: #2F65A7;} blockquote {border-left: 5px solid #ffcb05; margin: 1.5em 10px; padding: 0.5em 10px;}</style>

* Stata is a powerful and intuitive data analysis program. 
* Learning how to graph in Stata is an important part of learning how to use Stata. Yet, the default graphs in Stata can sometimes be less than optimal. 
* This document is an introduction to (a) basic graphing ideas in Stata; and (b) a quick note on the use of schemes to make your Stata graphs look more professional.

> When this document is presented in *slide show format*, some slides may be long, and you may need to *scroll down* to see the full slide.

# What are Variables?

* By variables, I simply mean the columns of data that you have.
* For our purposes, you may think of variables as synonymous with questionnaire items, or columns of data.

|          | Column 1 | Column 2 | Column 3 |
|----------|----------|----------|----------|
| Row    1 |          |          |          |
| Row    2 |          |          |          |
| Row    3 |          |          |          |

# Variable Types

* *Categorical variables* represent unordered categories like *race*, *ethnicity*, *neighborhood*, *religious affiliation*, or *place of residence*.
* *Continuous variables* represent a continuous scale like *income*, a *mental health scale*, or a *measure of life expectancy*.

# A Data Visualization Strategy

Once we have discerned the type of variable that have, there are two followup questions we may ask before deciding upon a graphing strategy:

* Is our graph about **one thing at a time**?
  + How much of *x* is there? 
  + What is the distribution of *x*?
* Is our graph about **two things at a time**?
  + What is the relationship of *x* and *y*?
  + How are *x* and *y* associated?


# Data Source

![Norway Spruce and Larch Forest in Austrian Alps](fotolia-small.jpg){ width=40% }

Image Source: [https://ec.europa.eu/jrc/en/research-topic/forestry/qr-tree-project/norway-spruce](https://ec.europa.eu/jrc/en/research-topic/forestry/qr-tree-project/norway-spruce)

The data used in this example are derived from the R package *Functions and Datasets for "Forest Analytics with R"*.

According to the documentation, the source of these data are: "von Guttenberg’s Norway spruce (Picea abies [L.] Karst) tree measurement data."

![Old Tjikko, a 9,550 Year Old Norway Spruce in Sweden](Old-Tjikko-Small.jpg){ width=20% }

The documentation goes on to further note that:

> "The data are measures from 107 trees. The trees were selected as being of average size from healthy and well stocked stands in the Alps."

    use "https://github.com/agrogan1/newstuff/raw/master/data-visualization-with-Stata/gutten.dta", clear
		
# Variables

`site` Growth *quality* class of the tree’s habitat. 5 levels.

`location` Distinguishes tree *location*. 7 levels.

`tree` An identifier for the tree within location.

`age_base` The tree age taken at ground level.

> For some purposes, it might be best to use a centered age variable, centered at the grand mean of tree age: 

    egen ageMEAN = mean(age_base)
	
	generate ageCENTERED = age_base - ageMEAN
	
`height` Tree height, m.

`dbh_cm` Tree diameter, cm.

`volume` Tree volume.

`age_bh` Tree age taken at 1.3 m.

`tree.ID` A factor uniquely identifying the tree.

# Graphs

## One Continuous Thing At A Time

    histogram height, title("Tree Height")
	
    graph export myhistogram.png, width(1000) replace

![Histogram Of Tree Height](myhistogram.png){width=50%}

## One Categorical Thing At A Time

    graph bar, over(location) title("Tree Location")
	
	graph export mybargraph.png, width(1000) replace

![Bar Graph Of Tree Location](mybargraph.png){width=50%}

## Continuous by Continuous

    twoway scatter height age_base, title("Tree Height by Age")
	
	graph export myscatter.png, width(1000) replace

![Scatterplot Of Tree Height By Age](myscatter.png){width=50%}

## Categorical by Categorical

    graph bar, over(site) over(location) title("Tree Site Growth Quality by Location")
	
	graph export mybargraph2.png, width(1000) replace

![Bar Graph Of Tree Site By Location](mybargraph2.png){width=50%}

## Continuous by Categorical

    graph bar height, over(location) title("Tree Height by Location")
	
	graph export mybargraph3.png, width(1000) replace

![Bar Graph Of Mean Tree Height By Location](mybargraph3.png){width=50%}

# Schemes

Stata *graph schemes* can substantially improve the look of a graph. Built in graph schemes include `s1color`, the default scheme `s2color`, `sj`, `economist` and `s1rcolor`. (Notably, as a *quick fix*, the default Stata graph scheme of `s2color` can be substantially improved by adding the option `,graphregion(fcolor(white))` which changes the background color of this scheme to *white*.)

`lean2` (type `findit lean2` in the Stata Command Window) is a user written scheme that is very helpful when preparing graphics for publication. I have written a [Stata Michigan graph scheme](https://agrogan1.github.io/Stata/) that can be installed. `cleanplots` and `modern` are excellent graph schemes that can be installed directly into Stata from GitHub. `burd` is another user written graph scheme that *somewhat* replicates the look of `ggplot`. 

## Continuous by Continuous

    twoway scatter height age_base, title("Tree Height by Age") scheme(michigan)
	
	graph export myscatterM.png, width(1000) replace

![Scatterplot Of Tree Height By Age With Michigan Graph Scheme](myscatterM.png){width=50%}

    twoway scatter height age_base, title("Tree Height by Age") scheme(lean2) msymbol(o)

	graph export myscatterL.png, width(1000) replace

![Scatterplot Of Tree Height By Age With lean2 Graph Scheme](myscatterL.png){width=50%}

    twoway scatter height age_base, title("Tree Height by Age") scheme(s1color)

	graph export myscatterS.png, width(1000) replace

![Scatterplot Of Tree Height By Age With s1color Graph Scheme](myscatterS.png){width=50%}

    twoway scatter height age_base, title("Tree Height by Age") scheme(burd) msymbol(o) graphregion(lcolor(none))

	graph export myscatterB.png, width(1000) replace

![Scatterplot Of Tree Height By Age With burd Graph Scheme](myscatterB.png){width=50%}

## Continuous by Categorical 

> Note that in the graph below, I have used the `asyvars` option to give different colors to the different bars.

	graph bar height, over(location) asyvars title("Tree Height by Location") scheme(michigan)
	
	graph export mybarM.png, width(1000) replace

![Bar Graph Of Mean Tree Height By Location With Michigan Graph Scheme](mybarM.png){width=50%}

	graph bar height, over(location) asyvars title("Tree Height by Location") scheme(lean2)
	
	graph export mybarL.png, width(1000) replace

![Bar Graph Of Mean Tree Height By Location With lean2 Graph Scheme](mybarL.png){width=50%}

	graph bar height, over(location) asyvars title("Tree Height by Location") scheme(s1color)
	
	graph export mybarS.png, width(1000) replace

![Bar Graph Of Mean Tree Height By Location With s1color Graph Scheme](mybarS.png){width=50%}

    graph bar height, over(location) asyvars title("Tree Height by Location") scheme(burd) graphregion(lcolor(none))

	graph export mybarB.png, width(1000) replace

![Bar Graph Of Mean Tree Height By Location With burd Graph Scheme](mybarB.png){width=50%}

